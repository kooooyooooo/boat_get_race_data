---
description: 
globs: 
alwaysApply: true
---
# Notebook 運用方針 & AIコーディングルール

## 背景
- ノートブック (`.ipynb`) はインタラクティブに可視化やデータ確認をするために便利だが、内部が JSON 形式であり複雑。
- 生成系AI（Cline, Cursorなど）は現状 Notebook の直接編集が苦手で、意図しない差分生成やコンテキスト過剰消費が発生しやすい。

## ルール概要
1. **Notebookには処理を書かない**  
   - 分析や可視化、簡単な実行結果確認のみを行う。  
   - ロジックやクラス、関数などは `.py` にまとめ、Notebook内ではそれらを呼び出す方針にする。

2. **基本ロジックは`.py`化し、ライブラリとして読み込む**  
   - Notebookにはインポートするだけで済むように設計。  
   - 生成AIで作ったコードも、最終的には`.py`ファイルに集約する。

3. **余計なコンテキストを増やさない**  
   - Notebookに大きなデータや長い出力、画像を埋め込むとAIコーディングツールのコンテキストを圧迫する。  
   - 必要に応じて出力をクリアし、要点のみ残す運用を心掛ける。

4. **AIコーディングツールでの編集は極力`.py`で実施**  
   - Notebookへの変更は直接行わない
   - Notebookは可視化と簡単な実行結果の表示をメインとし、実装はすべて`.py`側で完結させる。

5. **クラス・関数化の徹底**  
   - ユーザーがNotebookに書いたコードも、ある程度完成したら`.py`へ切り出し、再利用しやすい形にまとめる。  
   - 関数・クラスを適切に分割することで、AIによるリファクタリングやテストの効率も向上する。


要するに、ipynbを操作しないで！！！