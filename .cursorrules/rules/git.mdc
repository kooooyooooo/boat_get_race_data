---
description: 
globs: 
alwaysApply: false
---
## Git操作
このドキュメントでは、Git操作に関するベストプラクティスを説明します。
これらのガイドラインは、チームの開発プロセスの一貫性と効率性、品質向上を目的としています。


### 基本事項
- ブランチ運用
    - ブランチ作成: 各自の作業は、必ず develop ブランチから派生した個別の作業ブランチで行ってください。
    - コードレビュー: 作業完了後は、プルリクエスト(PR)を通じてコードレビューを実施します。
    - マージルール: レビュー完了後、問題がなければ develop ブランチにマージします。
    - 安定性: develop ブランチは常に安定した状態を維持することを目指し、十分なテストと品質管理をお願いします。

- ブランチ命名規則  
    作業内容に応じたプレフィックスを用いることで、ブランチの意図が明確になります。

    例:
    - 新機能: feature/新機能名
    - バグ修正: fix/バグ修正名
    - リファクタリング: refactor/リファクタリング名

### Git操作

- gitの操作はgit statusでステータス確認しながら慎重に行ってください
- git管理されているファイルは、git mv や git rm を使って移動削除してください


### コミットの作成
コミットを作成する際は、以下の手順に従います:

1. 変更の確認:  
- git status や git diff で変更点を確認します。

2. 変更の分析:  
- どのファイルが変更・追加されたか、変更の種類（新機能、バグ修正など）、影響範囲、機密情報の有無を確認します。

3. コミットメッセージの作成:  
- 「なぜ」変更したのかに焦点を当て、明確かつ具体的なメッセージを作成します。
- 関連チケットやIssue番号（例: fix #123）を含めると、後で変更履歴を追跡しやすくなります。

4. コミットの実行:  
- 必要なファイルを git add でステージングし、適切なメッセージで git commit を実行します。


#### コミットメッセージの例

```bash
# 新機能の追加
feat: Result型によるエラー処理の導入

# 既存機能の改善
update: キャッシュ機能のパフォーマンス改善

# バグ修正
fix: 認証トークンの期限切れ処理を修正

# リファクタリング
refactor: Adapterパターンを使用して外部依存を抽象化

# テスト追加
test: Result型のエラーケースのテストを追加

# ドキュメント更新
docs: エラー処理のベストプラクティスを追加
```


### プルリクエスト(PR)の作成
PRを作成する際は、以下の手順に従います:

1. 状態確認:  
git status、git diff、git log で現在のブランチ状態や変更内容、コミット履歴を確認します。

2. プルリクエスト作成:  
`gh pr` コマンドを使ってPRを作成します。  
PRのdescriptionは .github/pull_request_template.md を読み取ってフォーマットを合わせてください



### プルリクエスト(PR)のレビュー
以下の手順でファイルごとにコメントを付けてください:

1. PRの状態確認:  
   ```bash
   gh pr list --state open
   ```

2. PRの差分を確認:
   ```bash
   gh pr diff <PR番号>
   ```

3. 変更後のファイル全体とPRの差分を確認した上でレビューコメントを追加:  
   ```bash
   # 承認する場合
   gh pr review <PR番号> --approve

   # 修正を依頼する場合
   gh pr review <PR番号> --request-changes --body "こちらの部分に修正が必要です。"

   # コメントのみを残す場合
   gh pr review <PR番号> --comment --body "一部コメントしました。"
   ```

- チェックする観点は .github/pull_request_template.md を参照してください
- 承認する場合も「LGTM!!」とコメントはして下さい。


### 重要な注意事項

1. コミット関連

   - 関係ないファイルは含めない
   - 空のコミットは作成しない
   - git設定は変更しない

2. プルリクエスト関連

   - 必要に応じて新しいブランチを作成
   - 変更を適切にコミット
   - すべての変更を分析

3. 避けるべき操作
   - 対話的なgitコマンド（-iフラグ）の使用
   - git設定の変更

---
