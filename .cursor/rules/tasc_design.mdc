---
description: 
globs: 
alwaysApply: false
---
## 1. ゴール指向でタスクを切り分ける

### ● 明確なゴール設定
- **ゴールを可視化**: タスクを始める際に「このタスクで何を達成したいのか」を明文化する  
- **受け入れ基準 (Acceptance Criteria)**: 成果物の完成条件を具体的に定義し、ゴールの到達点をブレなく共有できるようにする

### ● 必要なステップを分割する
- **大きな機能⇒サブタスクへ**: 一度に複数の問題を抱えないように、小さな完了単位に分解する  
- **段階的に検証しやすい構成**: スプリントやイテレーション単位で完結する成果物を作り、進捗を可視化しやすくする

---

## 2. タスクの背景や文脈を共有する

### ● 全体像の中での位置づけ
- **なぜこのタスクが必要なのか**: 要求される機能の背景、ビジネス上の意義、技術的な文脈を伝える  
- **関連するプロダクトの要件**: 依存するシステムや他チームとの連携ポイントがあれば、事前に整理して共有

---

## 3. スコープとアウトプットを具体化する

### ● タスクの範囲定義
- **明確な境界線**: 「この部分は含むが、ここから先は他のタスク」など、担当範囲をはっきり示す  
- **想定される成果物**: コードやドキュメント、テストケースなど、作成すべきものをリスト化

### ● 作業手順や期待する成果の例示
- **実装例・参考コード**: 過去の類似実装やベストプラクティスを提示すると、エンジニアが方向性を掴みやすい  
- **完成イメージの共有**: UIなら画面デザイン、APIならAPI設計書など、最終形がイメージしやすい資料を用意する

## 4.ユーザーとのコミュニケーション
### ● ユーザーとの対話を重視
- **不明点は早期に確認**: 要件や仕様に不明点がある場合は、作業を進める前にユーザーや関係者に確認する
- **中間フィードバックの活用**: 開発途中でもユーザーからのフィードバックを得ることで、方向性のズレを早期に修正できる

### ● 質問の質を高める
- **具体的な質問**: 「これでいいですか？」ではなく、具体的な選択肢や懸念点を示して質問する
- **背景の共有**: 質問する際は、なぜその質問が必要なのか、どのような判断に影響するのかを伝える


---
